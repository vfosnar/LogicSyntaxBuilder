reference:
use build/dflipflop_32bit.json as dflipflop_32bit
use build/adder_8bit.json as adder_8bit
use build/adder_16bit.json as adder_16bit
use build/adder_32bit.json as adder_32bit


define:
in clk[1]
in in_BUS[32]
out out_BUS[32]
out_bus_8[32]
out_bus_88[32]
out_bus_16[32]
out_bus_32[32]

out out_dff[32]

; 0 SET
; 1 OUT
; 2 INC
; 3 DEC
in ctrl_8[4]
act_ctrl_8[1]
in ctrl_88[4]
act_ctrl_88[1]
in ctrl_16[4]
act_ctrl_16[1]
in ctrl_32[4]
act_ctrl_32[1]
in ctrl_clear[1]
dont_clear[1]

; collecton of signals
in_dff[32]

; signals with different range
in_dff8[32]
in_dff88[32]
in_dff16[32]
in_dff32[32]

; define vectors
; 8 bits
SET_in_dff8[8]
OUT_in_dff8[8]
INC_in_dff8[8]
DEC_in_dff8[8]
; 8-16 bits
SET_in_dff88[8]
OUT_in_dff88[8]
INC_in_dff88[8]
DEC_in_dff88[8]
; 16 bits
SET_in_dff16[16]
OUT_in_dff16[16]
INC_in_dff16[16]
DEC_in_dff16[16]
; 32 bits
SET_in_dff32[32]
OUT_in_dff32[32]
INC_in_dff32[32]
DEC_in_dff32[32]

KEEP_in_dff32[32]

; define data vectors
; 8 bits
data_SET_in_dff8[8]
data_OUT_in_dff8[8]
data_INC_in_dff8[8]
data_DEC_in_dff8[8]
; 8-16 bits
data_SET_in_dff88[8]
data_OUT_in_dff88[8]
data_INC_in_dff88[8]
data_DEC_in_dff88[8]
; 16 bits
data_SET_in_dff16[16]
data_OUT_in_dff16[16]
data_INC_in_dff16[16]
data_DEC_in_dff16[16]
; 32 bits
data_SET_in_dff32[32]
data_OUT_in_dff32[32]
data_INC_in_dff32[32]
data_DEC_in_dff32[32]

; define vectors needed by smaller operations
; 8 bits
proc_data_SUB_in_dff8[8]
; 8-16 bits
proc_data_SUB_in_dff88[8]
; 16 bits
proc_data_SUB_in_dff16[16]
; 32 bits
proc_data_SUB_in_dff32[32]

assign:
; collect signals into one
in_dff <= or in_dff8 in_dff88 in_dff16 in_dff32
out_BUS <= or out_bus_8 out_bus_88 out_bus_16 out_bus_32

; ##########   define signals with different ranges   ##########
in_dff8[0:8] <= or SET_in_dff8 OUT_in_dff8 INC_in_dff8 DEC_in_dff8
in_dff88[8:16] <= or SET_in_dff88 OUT_in_dff88 INC_in_dff88 DEC_in_dff88
in_dff16[0:16] <= or SET_in_dff16 OUT_in_dff16 INC_in_dff16 DEC_in_dff16
in_dff32[0:32] <= or SET_in_dff32 OUT_in_dff32 INC_in_dff32 DEC_in_dff32 KEEP_in_dff32

; boolean vector if any of control signals are active
@*
act_ctrl_8 <= or ctrl_8
act_ctrl_88 <= or ctrl_88
act_ctrl_16 <= or ctrl_16
act_ctrl_32 <= or ctrl_32
*@

; fix missing data
@*
in_dff8[8:32] <= and act_ctrl_8 out_dff[8:32]

in_dff88[0:8] <= and act_ctrl_88 out_dff[0:8]
in_dff88[16:32] <= and act_ctrl_88 out_dff[16:32]

in_dff16[16:32] <= and act_ctrl_16 out_dff[16:32]
*@

; ##########   enable signals with control signal   ##########
@*
; 8 bits
SET_in_dff8 <= and ctrl_8[0] data_SET_in_dff8
OUT_in_dff8 <= and ctrl_8[1] data_OUT_in_dff8
INC_in_dff8 <= and ctrl_8[2] data_INC_in_dff8
DEC_in_dff8 <= and ctrl_8[3] data_DEC_in_dff8
; 8-16 bits (88)
SET_in_dff88 <= and ctrl_88[0] data_SET_in_dff88
OUT_in_dff88 <= and ctrl_88[1] data_OUT_in_dff88
INC_in_dff88 <= and ctrl_88[2] data_INC_in_dff88
DEC_in_dff88 <= and ctrl_88[3] data_DEC_in_dff88
; 16 bits
SET_in_dff16 <= and ctrl_16[0] data_SET_in_dff16
OUT_in_dff16 <= and ctrl_16[1] data_OUT_in_dff16
INC_in_dff16 <= and ctrl_16[2] data_INC_in_dff16
DEC_in_dff16 <= and ctrl_16[3] data_DEC_in_dff16
; 32 bits
SET_in_dff32 <= and ctrl_32[0] data_SET_in_dff32
OUT_in_dff32 <= and ctrl_32[1] data_OUT_in_dff32
INC_in_dff32 <= and ctrl_32[2] data_INC_in_dff32
DEC_in_dff32 <= and ctrl_32[3] data_DEC_in_dff32
*@

; ##########   dont forgot the keep signal   ##########
@*
dont_clear <= nor ctrl_clear ctrl_8 ctrl_88 ctrl_16 ctrl_32
KEEP_in_dff32 <= and dont_clear out_dff
*@

; ##########   assign data   ##########
; 8 bits
; SET
data_SET_in_dff8 <= in_BUS[0:8]
; OUT
data_OUT_in_dff8 <= out_dff[0:8]
@*
out_bus_8[0:8] <= and ctrl_8[1] out_dff[0:8]
*@

; INC
adder_8bit
{
    to _a <= out_dff[0:8]
    to _b <= 1
    exp data_INC_in_dff8 <= _s
}
; DEC
adder_8bit
{
    to _a <= out_dff[0:8]
    to _b <= 255
    exp data_DEC_in_dff8 <= _s
}
; #####   8-16 bits (88)   #####
data_SET_in_dff88 <= in_BUS[0:8]
; OUT
data_OUT_in_dff88 <= out_dff[8:16]
@*
out_bus_88[0:8] <= and ctrl_88[1] out_dff[8:16]
*@

; INC
adder_8bit
{
    to _a <= out_dff[8:16]
    to _b <= 1
    exp data_INC_in_dff88 <= _s
}
; DEC
adder_8bit
{
    to _a <= out_dff[8:16]
    to _b <= 255
    exp data_DEC_in_dff88 <= _s
}
; #####   16 bits   #####
; SET
data_SET_in_dff16 <= in_BUS[0:16]
; OUT
data_OUT_in_dff16 <= out_dff[0:16]
@*
out_bus_16[0:16] <= and ctrl_16[1] out_dff[0:16]
*@

; INC
adder_16bit
{
    to _a <= out_dff[0:16]
    to _b <= 1
    exp data_INC_in_dff16 <= _s
}
; DEC
adder_16bit
{
    to _a <= out_dff[0:16]
    to _b <= 65535
    exp data_DEC_in_dff16 <= _s
}
; #####   32 bits   #####
; SET
data_SET_in_dff32 <= in_BUS[0:32]

; OUT
data_OUT_in_dff32 <= out_dff[0:32]
@*
out_bus_32[0:32] <= and ctrl_32[1] out_dff[0:32]
*@

; INC
adder_32bit
{
    to _a <= out_dff[0:32]
    to _b <= 1
    exp data_INC_in_dff32 <= _s
}
; DEC
adder_32bit
{
    to _a <= out_dff[0:32]
    to _b <= 4294967295
    exp data_DEC_in_dff32 <= _s
}

dflipflop_32bit
{
    to _clk <= clk
    to _inp <= in_dff
    exp out_dff <= _Q
}